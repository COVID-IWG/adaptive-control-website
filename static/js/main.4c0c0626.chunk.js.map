{"version":3,"sources":["logo.svg","components/Header.js","components/Maps.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","fixed","bg","variant","expand","class","Brand","href","alt","src","require","width","height","className","Toggle","aria-controls","Collapse","id","Nav","Link","React","Component","state_codes","NationalMap","geoJsonRef","createRef","viewport","lat","lng","zoom","feature","fillColor","Rt","properties","weight","opacity","color","fillOpacity","Map","center","this","zoomControl","scrollWheelZoom","GeoJSON","ref","data","IN","style","Details","viztype","unit","geography","Table","Badge","pill","size","App","state","vizType","rel","integrity","crossOrigin","Container","fluid","Row","Col","sm","Card","Body","Form","Group","controlId","Label","Control","as","custom","value","label","Object","keys","map","key","index","onChange","e","setState","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c0c0626.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.379fcb05.svg\";","import React from 'react';\n\nimport {Navbar, Nav} from 'react-bootstrap'\n\nclass Header extends React.Component { \n    render() { \n        return (\n            <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\" class=\"sidebar sidebar-collapsed toggled\">\n            <Navbar.Brand href=\"#home\">\n              <img\n                alt=\"\"\n                src={require('../logo.svg')}\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n              />{' '}\n              Adaptive Control\n            </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#team\">COVIN team</Nav.Link>\n                        <Nav.Link href=\"#sources\">Data Sources</Nav.Link>\n                        <Nav.Link href=\"#methods\">Methods</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>            \n        )\n    }\n}\n\nexport default Header;","import React from 'react';\n\n// import { Map, GeoJSON, TileLayer } from 'react-leaflet'\nimport { Map, GeoJSON } from 'react-leaflet'\n// import Choropleth from 'react-leaflet-choropleth'\n\n// import MH from \"../data/MH.json\"\nimport IN from \"../data/india.json\"\n\nfunction Rt_color(Rt) { \n    return Rt > 2 ? \"#d9534f\" : \n           Rt > 1 ? \"#fd7e14\" : \n                    \"#4BBF73\";\n}\n\nexport const state_codes = {\n    \"AN\": \"Andaman and Nicobar Islands\",\n    \"AP\": \"Andhra Pradesh\",\n    \"AR\": \"Arunachal Pradesh\",\n    \"AS\": \"Assam\",\n    \"BR\": \"Bihar\",\n    \"CH\": \"Chandigarh\",\n    \"CT\": \"Chhattisgarh\",\n    \"DN\": \"Dadra and Nagar Haveli\",\n    \"DD\": \"Daman and Diu\",\n    \"DL\": \"Delhi\",\n    \"GA\": \"Goa\",\n    \"GJ\": \"Gujarat\",\n    \"HR\": \"Haryana\",\n    \"HP\": \"Himachal Pradesh\",\n    \"JK\": \"Jammu and Kashmir\",\n    \"JH\": \"Jharkhand\",\n    \"KA\": \"Karnataka\",\n    \"KL\": \"Kerala\",\n    \"LD\": \"Lakshadweep\",\n    \"MP\": \"Madhya Pradesh\",\n    \"MH\": \"Maharashtra\",\n    \"MN\": \"Manipur\",\n    \"ML\": \"Meghalaya\",\n    \"MZ\": \"Mizoram\",\n    \"NL\": \"Nagaland\",\n    \"OR\": \"Odisha\",\n    \"PY\": \"Puducherry\",\n    \"PB\": \"Punjab\",\n    \"RJ\": \"Rajasthan\",\n    \"SK\": \"Sikkim\",\n    \"TN\": \"Tamil Nadu\",\n    \"TG\": \"Telangana\",\n    \"TR\": \"Tripura\",\n    \"UP\": \"Uttar Pradesh\",\n    \"UT\": \"Uttarakhand\",\n    \"WB\": \"West Bengal\",\n}\n\n// function highlightFeature (e) {\n//     var layer = e.target;\n  \n//     layer.setStyle({\n//       weight: 5,\n//       color: '#666',\n//       dashArray: '',\n//       fillOpacity: 0.7\n//     });\n//   }\n  \n//   // reset default style on mouseOut\n//   function resetHighlight (component, e) {\n//       console.log(component.refs.geojson);\n//     // geojsonresetStyle(e.target);\n//     component.refs.geoJsonRef.resetStyle(e.target)\n//   }\n\n//   function onEachFeature (component, feature, layer) {\n//     console.log(arguments);\n//       layer.on({\n//         mouseover: highlightFeature,\n//         mouseout: resetHighlight.bind(null, component),\n//       });\n//     }\n\n\nexport class NationalMap extends React.Component {\n    geoJsonRef = React.createRef();\n    viewport = { \n        lat: 23.384770186094563,\n        lng: 79.47014819820568,\n        zoom: 4.45\n    }\n\n    // highlightFeature(e) {\n    //     var layer = e.target;\n    \n    //     layer.setStyle({\n    //         weight: 5,\n    //         color: '#666',\n    //         dashArray: '',\n    //         fillOpacity: 0.7\n    //     });\n    \n    //     // if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n    //     //     layer.bringToFront();\n    //     // }\n    // }\n    \n    // resetHighlight(e) {\n    //     this.geoJsonRef.leafletElement.resetStyle(e.target);\n    // }\n    \n    // onEachFeature(_, layer) {\n    //     layer.on({\n    //         mouseover: this.highlightFeature.bind(this),\n    //         mouseout:  this.resetHighlight.bind(this)\n    //     });\n    // }\n    \n    style(feature) {\n        return {\n            fillColor: Rt_color(feature.properties.Rt-1),\n            weight: 2,\n            opacity: 1,\n            color: 'white',\n            fillOpacity: 0.8\n        };\n    }\n\n    render() { \n        return (\n        // <Jumbotron fluid id=\"natmapjumbotron\">\n            <Map center={[this.viewport.lat, this.viewport.lng]} zoom={this.viewport.zoom} zoomControl={false} scrollWheelZoom={false}>\n                <GeoJSON ref={this.geoJsonRef} data={IN} style={this.style}/>\n                {/* onEachFeature={onEachFeature} */}\n            </Map>\n        // </Jumbotron>\n        )\n    }\n}","import React from 'react';\nimport { Table, Badge } from 'react-bootstrap';\n\n\nexport const Details = ({viztype, geography}) => {\n    var unit = (geography === \"IN\") ? \"state\" : \"district\"\n    \n    if (viztype === \"statusmap\") {\n        return (<div>\n        <p>\n        An adaptive control policy sorts geographic units into different policy regimes based on a certain trigger. In the map displayed, each {unit} is colored according to a policy regime based on its <b>reproductive rate</b> (<i>R<sub>t</sub></i>): the number of additional cases in a community that a single person creates. \n        </p>\n        <p>\n            In the policy presented, we restrict movement in each {unit} based on the following criteria:\n            <br></br>\n            <Table>\n            <thead>\n                <tr style={{\"text-align\": \"center\"}}> <th>Policy Regime</th> <th>Trigger</th> <th>Description</th> </tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"danger\">  CRITICAL </Badge></td>  <td><i>R<sub>t</sub></i> &ge; 2 </td></tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"warning\">  MODERATE </Badge></td> <td><i>1 &le; R<sub>t</sub></i> &lt; 2 </td> </tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"success\"> IMPROVING </Badge></td> <td><i>R<sub>t</sub></i> &lt; 1</td> </tr>\n            </thead>\n            </Table>\n        </p>\n        </div>\n        )\n    } else {\n        return (<p>blah</p>)\n    }\n}\n\n// export default Description;","import React, { Component } from 'react';\nimport './App.css';\nimport {Row,Col} from 'react-bootstrap'\nimport Header from './components/Header.js';\nimport {NationalMap,state_codes} from \"./components/Maps.js\"\nimport { Details } from \"./components/Details.js\";\n\nimport Container from 'react-bootstrap/Container'\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\n// import {LineChart, Line} from 'recharts'\n\n\nexport default class App extends Component {\n    state = { \n        vizType : \"statusmap\",\n        geography : \"IN\"\n    };\n\n    render() {\n        return (\n            <>\n            <link\n                rel=\"stylesheet\"\n                href=\"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\"\n                integrity=\"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==\"\n                crossOrigin=\"\"\n            />\n            <div className=\"App\">\n            <Header />\n        \n            <Container fluid>\n            <Row>\n            <Col sm={8}>\n            <Card>\n                {/* <Card.Header as=\"h2\">Map</Card.Header> */}\n                <Card.Body>\n                <div>\n                <Form>\n                <Row>\n                <Col>\n                <Form.Group controlId=\"geoForm\">\n                    <Form.Label>Geography</Form.Label>\n                    <Form.Control as=\"select\" size=\"lg\" custom>\n                    <option value=\"IN\">All India</option>\n                    <optgroup label=\"States\">{\n                        Object.keys(state_codes).map((key, index) => ( \n                            <option value={key}>{state_codes[key]}</option>\n                        ))\n                    }\n                    </optgroup>\n                    </Form.Control>\n                </Form.Group>\n                </Col>\n                <Col>\n                <Form.Group controlId=\"vizForm\">\n                    <Form.Label>Visualization</Form.Label>\n                    <Form.Control as=\"select\" size=\"lg\" custom onChange = {(e) => {this.setState({vizType: e.target.value})}}>\n                    <optgroup label=\"Maps\">\n                    <option value=\"statusmap\">Status</option>\n                    <option value=\"rtmap\">Reproductive rate</option>\n                    {/* <option>Infection rate</option> */}\n                    <option value=\"Itmap\">Active infections</option>\n                    {/* <option>Death rate</option> */}\n                    {/* <option>Deaths</option> */}\n                    </optgroup>\n                    <optgroup label = \"Plots\">\n                    <option value=\"rtplot\">Reproductive rate</option>\n                    {/* <option>Infection rate</option> */}\n                    <option value=\"Itplot\">Active infections</option>\n                    {/* <option>Death rate</option> */}\n                    {/* <option>Deaths</option> */}\n                    </optgroup>\n                    </Form.Control>\n                </Form.Group>\n                </Col>\n                </Row>\n                </Form>\n                    {/* <InputGroup>\n                    </InputGroup> */}\n            </div>\n                <NationalMap />\n                </Card.Body>\n            </Card>\n                \n            </Col>\n            <Col sm={4}>\n            <Card>\n                <Card.Header as=\"h1\">Details</Card.Header>\n                <Card.Body>\n                <Details viztype={this.state.vizType} geography={this.state.geography}/>\n                </Card.Body>\n            </Card>\n            <br></br>\n            </Col>\n          </Row>\n            </Container>\n        \n            </div>\n            </>\n          );\n        }\n    }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './corporate.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}