{"version":3,"sources":["components/Plots.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["state_codes","Details","viztype","unit","geography","Card","Title","className","Table","style","Badge","pill","size","variant","cardHeader","name","Header","as","class","App","state","vizType","Row","Col","Body","Subtitle","sm","id","Form","Group","controlId","Label","Control","custom","onChange","e","setState","target","value","label","Object","keys","map","key","this","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.557ced13.chunk.js","sourcesContent":["export const state_codes = {\n    // \"AN\": \"Andaman and Nicobar Islands\",\n    \"AP\": \"Andhra Pradesh\",\n    // \"AR\": \"Arunachal Pradesh\",\n    \"AS\": \"Assam\",\n    \"BR\": \"Bihar\",\n    // \"CH\": \"Chandigarh\",\n    \"CT\": \"Chhattisgarh\",\n    \"DL\": \"Delhi\",\n    \"GA\": \"Goa\",\n    \"GJ\": \"Gujarat\",\n    \"HR\": \"Haryana\",\n    \"HP\": \"Himachal Pradesh\",\n    \"JK\": \"Jammu and Kashmir\",\n    \"JH\": \"Jharkhand\",\n    \"KA\": \"Karnataka\",\n    \"KL\": \"Kerala\",\n    \"MP\": \"Madhya Pradesh\",\n    \"MH\": \"Maharashtra\",\n    \"MN\": \"Manipur\",\n    \"ML\": \"Meghalaya\",\n    \"OR\": \"Odisha\",\n    \"PB\": \"Punjab\",\n    \"RJ\": \"Rajasthan\",\n    \"SK\": \"Sikkim\",\n    \"TN\": \"Tamil Nadu\",\n    \"TG\": \"Telangana\",\n    \"TR\": \"Tripura\",\n    \"UP\": \"Uttar Pradesh\",\n    \"UT\": \"Uttarakhand\",\n    \"WB\": \"West Bengal\",\n}\n\n","import React from 'react';\nimport { Table, Badge } from 'react-bootstrap';\nimport Card from 'react-bootstrap/Card'\n\n// const typenames = {\n//     statusmap: \"Adaptive Control Status\",\n//     rtmap: \"Reproductive rate\",\n//     Itmap: \"Active infections\",\n//     rtplot: \"Reproductive rate\",\n//     Itplot: \"Active infections\"\n// }\n\nexport const Details = ({viztype, geography}) => {\n    var unit = (geography === \"IN\") ? \"state\" : \"district\"\n    \n    if (viztype === \"statusmap\") {\n        return (<div>\n        <Card.Title className=\"italic\">Adaptive Control Status (by {unit})</Card.Title>\n        <p>\n        An adaptive control policy sorts geographic units into different policy regimes based on a certain trigger. In the map displayed, each {unit} is colored according to a policy regime based on its <b>reproductive rate</b> (<i>R<sub>t</sub></i>): the number of additional cases in a community that a single person creates. \n        </p>\n        <p>\n            In the policy presented, we restrict movement in each {unit} based on the following criteria:\n            <br></br>\n            <Table>\n            <thead>\n                <tr style={{\"text-align\": \"center\"}}> <th>Policy Regime</th> <th>Trigger</th> <th>Description</th> </tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"danger\">  CRITICAL </Badge></td>  <td><i>R<sub>t</sub></i> &ge; 2 </td></tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"warning\">  MODERATE </Badge></td> <td><i>1 &le; R<sub>t</sub></i> &lt; 2 </td> </tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"success\"> IMPROVING </Badge></td> <td><i>R<sub>t</sub></i> &lt; 1</td> </tr>\n            </thead>\n            </Table>\n        </p>\n        </div>\n        )\n    } else {\n        return (\n        <div>\n            <p>blah</p>\n        </div>)\n    }\n}\n\n// export default Description;","import React from \"react\";\n\nimport { Row, Col } from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\n\nimport { state_codes } from \"./components/Plots.js\";\nimport { Details } from \"./components/Details.js\";\nimport \"./App.css\";\n\nconst cardHeader = (name) => (\n  <Card.Header as=\"h2\" class=\"card-header bg-light border-dark\">\n    {name}\n  </Card.Header>\n);\n\nexport default class App extends React.Component {\n  state = {\n    vizType: \"statusmap\",\n    geography: \"IN\",\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"App container\">\n          <Row>\n            <Col>\n              <Card className=\"bg-dark text-white text-center\">\n                <Card.Header as=\"h1\" className=\"bg-dark text-white text-center\">\n                  {\" \"}\n                  Adaptive Control of COVID-19 in India{\" \"}\n                </Card.Header>\n                <Card.Body>\n                  <Card.Subtitle as=\"h3\" className=\"text-secondary\">\n                    {\" \"}\n                    Tracking COVID-19 and recommending control efforts across states in India.\n                  </Card.Subtitle>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col sm={8}>\n              <Card id=\"viz_box\">\n                {cardHeader(\"Analysis\")}\n                <Card.Body>\n                  <div>\n                    <Form>\n                      <Row>\n                        <Col>\n                          <Form.Group controlId=\"geoForm\">\n                            <Form.Label as=\"h3\" className=\"text-dark\">\n                              Geography\n                            </Form.Label>\n                            <Form.Control\n                              as=\"select\"\n                              size=\"lg\"\n                              custom\n                              onChange={(e) => {\n                                this.setState({ geography: e.target.value });\n                              }}>\n                              <option value=\"IN\">All India</option>\n                              <optgroup label=\"States\">\n                                {Object.keys(state_codes).map((key) => (\n                                  <option value={key}>{state_codes[key]}</option>\n                                ))}\n                              </optgroup>\n                            </Form.Control>\n                          </Form.Group>\n                        </Col>\n                        <Col>\n                          <Form.Group controlId=\"vizForm\">\n                            <Form.Label as=\"h3\" className=\"text-dark\">\n                              Visualization\n                            </Form.Label>\n                            <Form.Control\n                              as=\"select\"\n                              size=\"lg\"\n                              custom\n                              onChange={(e) => {\n                                this.setState({ vizType: e.target.value });\n                              }}>\n                              <optgroup label=\"Maps\">\n                                <option value=\"statusmap\">Adaptive Control Status</option>\n                                <option value=\"rtmap\">Reproductive rate</option>\n                                <option value=\"Itmap\">Active infections</option>\n                              </optgroup>\n                              <optgroup label=\"Plots\">\n                                <option value=\"rtplot\">Reproductive rate</option>\n                                <option value=\"Itplot\">Active infections</option>\n                              </optgroup>\n                            </Form.Control>\n                          </Form.Group>\n                        </Col>\n                      </Row>\n                    </Form>\n                  </div>\n                  <div>here is a map</div>\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col sm={4}>\n              <Card id=\"detail_box\">\n                {cardHeader(\"Details\")}\n                <Card.Body>\n                  <Details viztype={this.state.vizType} geography={this.state.geography} />\n                </Card.Body>\n              </Card>\n              <br></br>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card>\n                {cardHeader(\"COVIN Team\")}\n                <Card.Body>\n                  <p>\n                    The COVIN team is a group of academics from a number of universities (University of Chicago, MIT, Duke, Stanford, among others) that came\n                    together after the COVID pandemic struck to develop models and do empirical work to support the response to COVID in India.\n                  </p>\n                  <p>\n                    The parameter estimation and adaptive control model is built on work done by{\" \"}\n                    <a href=\"https://twitter.com/bettencourtluis\">Luis Bettencourt</a>, <a href=\"https://twitter.com/satejsoman\">Satej Soman</a>, and{\" \"}\n                    <a href=\"http://www.anupmalani.com/\">Anup Malani</a> at the University of Chicago, with critical inputs from David Kaiser, Jon Gruber, and\n                    Stuti Sachdeva at MIT; Vaidehi Tandel at IDFC Institute; Manoj Mohanan at Duke; and many others. It benefited from critical feedback from\n                    Bhramar Mukherjee at University of Michigan and data analysis by Clement Imbert at Warwick and Sam Asher at Johns Hopkins. Devavrat Shah and\n                    his students at MIT played a critical role in validating our SIR model against a model that used their synthetic intervention methods.\n                  </p>\n                  <p>\n                    Additional analysis, visualization, and engineering was done by Nico Marchio, Manasi Phadnis, Caitlin Loftus, Ananya Karanam, and Thomas\n                    Weil (all at the University of Chicago).\n                  </p>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card>\n                {cardHeader(\"Data Sources\")}\n                <Card.Body>\n                  <p>\n                    The testing, case, deaths data for Indian reported on this website and used by our model is drawn from{\" \"}\n                    <a href=\"www.covid19india.org\">Covid19India</a>.\n                  </p>\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col>\n              <Card>\n                {cardHeader(\"Methods\")}\n                <Card.Body>\n                  <p>\n                    The methods used to forecast infections and reproductive rate, as well as recommendations for control, are described in detail in\n                    WHITEPAPER.\n                  </p>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './corporate.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}