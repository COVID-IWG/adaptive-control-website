{"version":3,"sources":["logo.svg","components/Maps.js","components/Details.js","components/Home.js","components/Header.js","components/CovinTeam.js","components/DataSources.js","components/Methods.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","state_codes","geo_data","AP","AS","BR","CH","CT","DNDD","DL","GA","GJ","HR","HP","JK","JH","KA","KL","MP","MH","MN","ML","OR","PY","PB","RJ","SK","TN","TG","TR","UP","UT","WB","IN","NationalMap","viewport","lat","lng","zoom","feature","fillColor","weight","opacity","color","fillOpacity","Rt","properties","geokey","this","props","mapkey","console","log","Map","key","center","GeoJSON","data","style","style_fix","React","Component","Details","viztype","unit","geography","Table","Badge","pill","size","variant","Home","state","vizType","Row","Col","Card","className","Body","Title","Subtitle","sm","Form","Group","controlId","Label","as","Control","custom","onChange","e","setState","target","value","label","Object","keys","map","Header","Navbar","fixed","bg","expand","class","Brand","href","alt","src","require","width","height","Toggle","aria-controls","Collapse","id","Nav","pullRight","Link","CovinTeam","_","DataSources","Methods","App","rel","integrity","crossOrigin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c141d2e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.379fcb05.svg\";","import React from 'react';\n\nimport { Map, GeoJSON } from 'react-leaflet'\n// import { Map, GeoJSON } from 'react-leaflet'\n// import Choropleth from 'react-leaflet-choropleth'\n\nimport AP from \"../data/AP.json\"\nimport AS from \"../data/AS.json\"\nimport BR from \"../data/BR.json\"\nimport CH from \"../data/CH.json\"\nimport CT from \"../data/CT.json\"\nimport DNDD from \"../data/DNDD.json\"\nimport DL from \"../data/DL.json\"\nimport GA from \"../data/GA.json\"\nimport GJ from \"../data/GJ.json\"\nimport HR from \"../data/HR.json\"\nimport HP from \"../data/HP.json\"\nimport JK from \"../data/JK.json\"\nimport JH from \"../data/JH.json\"\nimport KA from \"../data/KA.json\"\nimport KL from \"../data/KL.json\"\nimport MP from \"../data/MP.json\"\nimport MH from \"../data/MH.json\"\nimport MN from \"../data/MN.json\"\nimport ML from \"../data/ML.json\"\nimport OR from \"../data/OR.json\"\nimport PY from \"../data/PY.json\"\nimport PB from \"../data/PB.json\"\nimport RJ from \"../data/RJ.json\"\nimport SK from \"../data/SK.json\"\nimport TN from \"../data/TN.json\"\nimport TG from \"../data/TG.json\"\nimport TR from \"../data/TR.json\"\nimport UP from \"../data/UP.json\"\nimport UT from \"../data/UT.json\"\nimport WB from \"../data/WB.json\"\n\nimport IN from \"../data/IN.json\"\n\nfunction Rt_color(Rt) { \n    return Rt > 2 ? \"#f44455\" : \n           Rt > 1 ? \"#fcc100\" : \n                    \"#5fc27e\" ;\n}\n\nexport const state_codes = {\n    // \"AN\": \"Andaman and Nicobar Islands\",\n    \"AP\": \"Andhra Pradesh\",\n    // \"AR\": \"Arunachal Pradesh\",\n    \"AS\": \"Assam\",\n    \"BR\": \"Bihar\",\n    // \"CH\": \"Chandigarh\",\n    \"CT\": \"Chhattisgarh\",\n    \"DL\": \"Delhi\",\n    \"GA\": \"Goa\",\n    \"GJ\": \"Gujarat\",\n    \"HR\": \"Haryana\",\n    \"HP\": \"Himachal Pradesh\",\n    \"JK\": \"Jammu and Kashmir\",\n    \"JH\": \"Jharkhand\",\n    \"KA\": \"Karnataka\",\n    \"KL\": \"Kerala\",\n    \"MP\": \"Madhya Pradesh\",\n    \"MH\": \"Maharashtra\",\n    \"MN\": \"Manipur\",\n    \"ML\": \"Meghalaya\",\n    \"OR\": \"Odisha\",\n    \"PB\": \"Punjab\",\n    \"RJ\": \"Rajasthan\",\n    \"SK\": \"Sikkim\",\n    \"TN\": \"Tamil Nadu\",\n    \"TG\": \"Telangana\",\n    \"TR\": \"Tripura\",\n    \"UP\": \"Uttar Pradesh\",\n    \"UT\": \"Uttarakhand\",\n    \"WB\": \"West Bengal\",\n}\n\nexport const geo_data = { \n    \"AP\": AP,\n    // \"AR\": AR,\n    \"AS\": AS,\n    \"BR\": BR,\n    \"CH\": CH,\n    \"CT\": CT,\n    \"DNDD\": DNDD,\n    \"DL\": DL,\n    \"GA\": GA,\n    \"GJ\": GJ,\n    \"HR\": HR,\n    \"HP\": HP,\n    \"JK\": JK,\n    \"JH\": JH,\n    \"KA\": KA,\n    \"KL\": KL,\n    \"MP\": MP,\n    \"MH\": MH,\n    \"MN\": MN,\n    \"ML\": ML,\n    \"OR\": OR,\n    \"PY\": PY,\n    \"PB\": PB,\n    \"RJ\": RJ,\n    \"SK\": SK,\n    \"TN\": TN,\n    \"TG\": TG,\n    \"TR\": TR,\n    \"UP\": UP,\n    \"UT\": UT,\n    \"WB\": WB,\n    \"IN\": IN\n}\n\nexport const loadLeaflet = () => ( \n    <>\n    <link rel=\"stylesheet\"\n    href=\"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\"\n    integrity=\"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==\"\n    crossOrigin=\"\"/>\n    </>\n)\n\nexport class NationalMap extends React.Component {\n    viewport = { \n        lat: 23.384770186094563,\n        lng: 79.47014819820568,\n        zoom: 4.45\n    }\n\n    style_fix(feature) {\n        return {\n            fillColor: \"grey\",\n            weight: 0.8,\n            opacity: 1,\n            color: 'grey',\n            fillOpacity: 1\n        };\n    }\n\n    style(feature) {\n        return {\n            fillColor: Rt_color(feature.properties.Rt),\n            weight: 1,\n            opacity: 1,\n            color: 'white',\n            fillOpacity: 1\n        };\n    }\n\n    render() { \n        var geokey = this.props.geokey;\n        var mapkey = \"map_\" + geokey\n        console.log(\"rendering map\")\n        console.log(this)\n        console.log(this.props)\n        console.log(geokey)\n        console.log(mapkey)\n        return (\n        <Map key={mapkey} center={[this.viewport.lat, this.viewport.lng]} zoom={this.viewport.zoom}>\n            <GeoJSON key=\"IN_fix\" data={geo_data[\"IN\"]}   style={this.style_fix}/>\n            <GeoJSON key={geokey} data={geo_data[geokey]} style={this.style}/>\n        </Map>)\n    }\n}","import React from 'react';\nimport { Table, Badge } from 'react-bootstrap';\n\n\nexport const Details = ({viztype, geography}) => {\n    var unit = (geography === \"IN\") ? \"state\" : \"district\"\n    \n    if (viztype === \"statusmap\") {\n        return (<div>\n        <p>\n        An adaptive control policy sorts geographic units into different policy regimes based on a certain trigger. In the map displayed, each {unit} is colored according to a policy regime based on its <b>reproductive rate</b> (<i>R<sub>t</sub></i>): the number of additional cases in a community that a single person creates. \n        </p>\n        <p>\n            In the policy presented, we restrict movement in each {unit} based on the following criteria:\n            <br></br>\n            <Table>\n            <thead>\n                <tr style={{\"text-align\": \"center\"}}> <th>Policy Regime</th> <th>Trigger</th> <th>Description</th> </tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"danger\">  CRITICAL </Badge></td>  <td><i>R<sub>t</sub></i> &ge; 2 </td></tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"warning\">  MODERATE </Badge></td> <td><i>1 &le; R<sub>t</sub></i> &lt; 2 </td> </tr>\n                <tr> <td><Badge pill size=\"lg\" variant=\"success\"> IMPROVING </Badge></td> <td><i>R<sub>t</sub></i> &lt; 1</td> </tr>\n            </thead>\n            </Table>\n        </p>\n        </div>\n        )\n    } else {\n        return (<p>blah</p>)\n    }\n}\n\n// export default Description;","import React from 'react';\nimport {Row,Col} from 'react-bootstrap'\nimport {NationalMap, state_codes} from \"./Maps.js\"\nimport { Details } from \"./Details.js\";\n\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\n\n\nexport default class Home extends React.Component { \n    state = { \n        vizType : \"statusmap\",\n        geography : \"IN\"\n    };\n\n    render() {\n        return (<>    \n        <Row>\n            <Col>\n            <Card className=\"bg-dark text-white text-center\">\n                <Card.Body>\n                <Card.Title className=\"text-white\"> Adaptive Control of COVID-19 in India </Card.Title>\n                <Card.Subtitle className=\"text-secondary\"> Tracking COVID-19 and recommending control efforts across states in India.</Card.Subtitle>\n                </Card.Body>\n            </Card>\n            </Col>\n        </Row>\n        <Row>\n        <Col sm={8}>\n        <Card>\n            {/* <Card.Header as=\"h2\">Map</Card.Header> */}\n            <Card.Body>\n            <div>\n            <Form>\n            <Row>\n            <Col>\n            <Form.Group controlId=\"geoForm\">\n                <Form.Label as=\"h2\">Geography</Form.Label>\n                <Form.Control as=\"select\" size=\"lg\" custom onChange = {(e) => {\n                    this.setState({geography: e.target.value});\n                    console.log(\"fc set state\")\n                    console.log(this)\n                    console.log(this.state.geography)\n                }}>\n                <option value=\"IN\">All India</option>\n                <optgroup label=\"States\">{\n                    Object.keys(state_codes).map((key) => ( \n                        <option value={key}>{state_codes[key]}</option>\n                    ))\n                }\n                </optgroup>\n                </Form.Control>\n            </Form.Group>\n            </Col>\n            <Col>\n            <Form.Group controlId=\"vizForm\">\n                <Form.Label as=\"h2\">Visualization</Form.Label>\n                <Form.Control as=\"select\" size=\"lg\" custom onChange = {(e) => {this.setState({vizType: e.target.value})}}>\n                <optgroup label=\"Maps\">\n                <option value=\"statusmap\">Status</option>\n                <option value=\"rtmap\">Reproductive rate</option>\n                {/* <option>Infection rate</option> */}\n                <option value=\"Itmap\">Active infections</option>\n                {/* <option>Death rate</option> */}\n                {/* <option>Deaths</option> */}\n                </optgroup>\n                <optgroup label = \"Plots\">\n                <option value=\"rtplot\">Reproductive rate</option>\n                {/* <option>Infection rate</option> */}\n                <option value=\"Itplot\">Active infections</option>\n                {/* <option>Death rate</option> */}\n                {/* <option>Deaths</option> */}\n                </optgroup>\n                </Form.Control>\n            </Form.Group>\n            </Col>\n            </Row>\n            </Form>\n                {/* <InputGroup>\n                </InputGroup> */}\n        </div>\n            <NationalMap geokey={this.state.geography}/>\n            </Card.Body>\n        </Card>\n            \n        </Col>\n        <Col sm={4}>\n        <Card>\n            <Card.Header as=\"h1\">Details</Card.Header>\n            <Card.Body>\n            <Details viztype={this.state.vizType} geography={this.state.geography}/>\n            </Card.Body>\n        </Card>\n        <br></br>\n        </Col>\n      </Row>\n        </>)\n    }\n}","import React from 'react';\n\nimport {Navbar, Nav} from 'react-bootstrap'\n\nclass Header extends React.Component { \n    render() { \n        return (\n            <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\" class=\"sidebar sidebar-collapsed toggled\">\n            <Navbar.Brand href=\"#home\">\n              <img\n                alt=\"\"\n                src={require('../logo.svg')}\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n              />{' '}\n              Home\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav pullRight className=\"mr-auto\">\n                    <Nav.Link href=\"#team\">COVIN team</Nav.Link>\n                    <Nav.Link href=\"#sources\">Data Sources</Nav.Link>\n                    <Nav.Link href=\"#methods\">Methods</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n            </Navbar>            \n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nconst CovinTeam = _ => (\n    <Card>\n        <Card.Header as=\"h2\">COVIN Team</Card.Header>\n        <Card.Body>\n        <p>\n        The COVIN team is a group of academics from a number of universities (University of Chicago, MIT, Duke, Stanford, among others) that came together after the COVID pandemic struck to develop models and do empirical work to support the response to COVID in India.  \n        </p>\n        <p>\n        The parameter estimation and adaptive control model is built on work done by <a href=\"https://twitter.com/bettencourtluis\">Luis Bettencourt</a>, <a href=\"https://twitter.com/satejsoman\">Satej Soman</a>, and <a href=\"http://www.anupmalani.com/\">Anup Malani</a> at the University of Chicago, with critical inputs from David Kaiser, Jon Gruber, and Stuti Sachdeva at MIT; Vaidehi Tandel at IDFC Institute; Manoj Mohanan at Dukel and many others.  It benefitted from critical feedback from Bhramar Mukherjee at University of Michigan and data analysis by Clement Imbert at Warwick and Sam Asher at Johns Hopkins.  Devavrat Shah and his students at MIT played a critical role in validating our SIR model against a model that used their synthetic intervention methods.\n        </p>\n        <p>\n        Additional analysis, visualization, and engineering was done by Nico Marchio, Manasi Phadnis, Caitlin Loftus, Ananya Karanam, and Thomas Weil (all at the University of Chicago).   \n        </p>\n        </Card.Body>\n    </Card>\n)\n\nexport default CovinTeam;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nconst DataSources = _ => (\n    <Card>\n    <Card.Header as=\"h2\">Data Sources</Card.Header>\n    <Card.Body> </Card.Body>\n    </Card>\n)\n\nexport default DataSources;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nconst Methods = _ => (\n    <Card>\n    <Card.Header as=\"h2\">Methods</Card.Header>\n    <Card.Body></Card.Body>\n    </Card>\n)\n\nexport default Methods;","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport {Navbar, Nav, NavItem} from 'react-bootstrap'\n\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    NavLink,\n    Redirect\n    // LinkContainer\n} from \"react-router-bootstrap\";\n\nimport Home from './components/Home';\nimport Header from './components/Header';\nimport {loadLeaflet} from \"./components/Maps\"\nimport CovinTeam from \"./components/CovinTeam\";\nimport DataSources from \"./components/DataSources\";\nimport Methods from \"./components/Methods\";\nimport Routes from \"./components/Routes\";\n\nimport './App.css';\n\n// const Header = _ => <>\n//     <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\" class=\"sidebar sidebar-collapsed toggled\">\n//     <LinkContainer to=\"/\">\n//         <Navbar.Brand>\n//         <img alt=\"\" src={require('./logo.svg')} width=\"30\" height=\"30\" className=\"d-inline-block align-top\"/>{' '}\n//         Home\n//         </Navbar.Brand>\n//     </LinkContainer>\n//     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n//     <Navbar.Collapse id=\"basic-navbar-nav\">\n//     <Nav className=\"mr-auto\">\n//         <LinkContainer to=\"/team\">COVIN team</LinkContainer>\n//         <LinkContainer to=\"/sources\">Data Sources</LinkContainer>\n//         <LinkContainer to=\"/methods\">Methods</LinkContainer>\n//     </Nav>\n//     </Navbar.Collapse>\n//     </Navbar>         \n// </>\n\nconst _Header = _ => <>\n    <Navbar fluid collapseOnSelect>\n    <Navbar.Header>\n        <Navbar.Brand>\n        <Link to=\"/\">Scratch</Link>\n        </Navbar.Brand>\n        <Navbar.Toggle />\n    </Navbar.Header>\n    <Navbar.Collapse>\n        <Nav pullRight>\n        <NavItem href=\"/signup\">Signup</NavItem>\n        <NavItem href=\"/login\">Login</NavItem>\n        </Nav>\n    </Navbar.Collapse>\n    </Navbar>\n    <Routes />\n</>\n\nconst App = _ => <>\n    {loadLeaflet()}\n    <div className=\"App container\">\n    <Header />\n    <Home />\n    <CovinTeam />\n    <DataSources />\n    <Methods />\n    {/* <Router>\n    <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\" class=\"sidebar sidebar-collapsed toggled\">\n    <Navbar.Brand href=\"#home\">\n        <img alt=\"\" src={require('./logo.svg')} width=\"30\" height=\"30\" className=\"d-inline-block align-top\"/>{' '}\n        Home\n    </Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav  className=\"mr-auto\">\n            <Nav.Link href=\"#team\">COVIN team</Nav.Link>\n            <Nav.Link href=\"#sources\">Data Sources</Nav.Link>\n            <Nav.Link href=\"#methods\">Methods</Nav.Link>\n        </Nav>\n    </Navbar.Collapse>\n    </Navbar>    \n    <Routes />\n    </Router> */}\n    </div>\n</>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './corporate.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}